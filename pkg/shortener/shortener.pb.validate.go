// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shortener.proto

package shortener

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortUrlRequestMultiError, or nil if none found.
func (m *GetShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetOriginalUrl()); err != nil {
		err = GetShortUrlRequestValidationError{
			field:  "OriginalUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := GetShortUrlRequestValidationError{
			field:  "OriginalUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetShortUrlRequestMultiError(errors)
	}

	return nil
}

// GetShortUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetShortUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortUrlRequestMultiError) AllErrors() []error { return m }

// GetShortUrlRequestValidationError is the validation error returned by
// GetShortUrlRequest.Validate if the designated constraints aren't met.
type GetShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortUrlRequestValidationError) ErrorName() string {
	return "GetShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortUrlRequestValidationError{}

// Validate checks the field values on GetShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortUrlResponseMultiError, or nil if none found.
func (m *GetShortUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return GetShortUrlResponseMultiError(errors)
	}

	return nil
}

// GetShortUrlResponseMultiError is an error wrapping multiple validation
// errors returned by GetShortUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type GetShortUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortUrlResponseMultiError) AllErrors() []error { return m }

// GetShortUrlResponseValidationError is the validation error returned by
// GetShortUrlResponse.Validate if the designated constraints aren't met.
type GetShortUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortUrlResponseValidationError) ErrorName() string {
	return "GetShortUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortUrlResponseValidationError{}

// Validate checks the field values on GetOriginalUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOriginalUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOriginalUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOriginalUrlRequestMultiError, or nil if none found.
func (m *GetOriginalUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOriginalUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetShortUrl()); err != nil {
		err = GetOriginalUrlRequestValidationError{
			field:  "ShortUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := GetOriginalUrlRequestValidationError{
			field:  "ShortUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOriginalUrlRequestMultiError(errors)
	}

	return nil
}

// GetOriginalUrlRequestMultiError is an error wrapping multiple validation
// errors returned by GetOriginalUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOriginalUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOriginalUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOriginalUrlRequestMultiError) AllErrors() []error { return m }

// GetOriginalUrlRequestValidationError is the validation error returned by
// GetOriginalUrlRequest.Validate if the designated constraints aren't met.
type GetOriginalUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOriginalUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOriginalUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOriginalUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOriginalUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOriginalUrlRequestValidationError) ErrorName() string {
	return "GetOriginalUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOriginalUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOriginalUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOriginalUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOriginalUrlRequestValidationError{}

// Validate checks the field values on GetOriginalUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOriginalUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOriginalUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOriginalUrlResponseMultiError, or nil if none found.
func (m *GetOriginalUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOriginalUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalUrl

	if len(errors) > 0 {
		return GetOriginalUrlResponseMultiError(errors)
	}

	return nil
}

// GetOriginalUrlResponseMultiError is an error wrapping multiple validation
// errors returned by GetOriginalUrlResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOriginalUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOriginalUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOriginalUrlResponseMultiError) AllErrors() []error { return m }

// GetOriginalUrlResponseValidationError is the validation error returned by
// GetOriginalUrlResponse.Validate if the designated constraints aren't met.
type GetOriginalUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOriginalUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOriginalUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOriginalUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOriginalUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOriginalUrlResponseValidationError) ErrorName() string {
	return "GetOriginalUrlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOriginalUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOriginalUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOriginalUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOriginalUrlResponseValidationError{}
